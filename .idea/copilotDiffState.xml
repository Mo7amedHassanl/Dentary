<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/navigation/DentaryApp.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/navigation/DentaryApp.kt" />
              <option name="originalContent" value="package com.m7md7sn.dentary.presentation.navigation&#10;&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.rounded.Add&#10;import androidx.compose.material3.FabPosition&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.navArgument&#10;import com.m7md7sn.dentary.data.model.Screen&#10;import com.m7md7sn.dentary.presentation.theme.BackgroundColor&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;import com.m7md7sn.dentary.presentation.ui.addpatient.AddPatientScreen&#10;import com.m7md7sn.dentary.presentation.ui.auth.emailverification.EmailVerificationScreen&#10;import com.m7md7sn.dentary.presentation.ui.auth.login.LoginScreen&#10;import com.m7md7sn.dentary.presentation.ui.auth.passwordreset.PasswordResetScreen&#10;import com.m7md7sn.dentary.presentation.ui.auth.register.RegisterScreen&#10;import com.m7md7sn.dentary.presentation.ui.home.HomeScreen&#10;import com.m7md7sn.dentary.presentation.ui.splash.SplashScreen&#10;import com.m7md7sn.dentary.presentation.ui.patients.PatientsScreen&#10;import com.m7md7sn.dentary.presentation.ui.profile.ProfileScreen&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsScreen&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsViewModel&#10;&#10;@Composable&#10;fun DentaryNavHost(&#10;    navController: NavHostController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    val settingsViewModel: SettingsViewModel = hiltViewModel()&#10;    val settingsUiState by settingsViewModel.uiState.collectAsState()&#10;&#10;    val showBottomBar = when (currentRoute) {&#10;        Screen.Home.route, Screen.Profile.route, Screen.Settings.route, Screen.Appointments.route, Screen.Chats.route -&gt; true&#10;        else -&gt; false&#10;    }&#10;    val showTopBar = when (currentRoute) {&#10;        Screen.Splash.route, Screen.Login.route, Screen.Register.route, Screen.EmailVerification.route, Screen.PasswordReset.route -&gt; false&#10;        else -&gt; true&#10;    }&#10;&#10;    val topBarShowBackButton: Boolean = when (currentRoute) {&#10;        Screen.Home.route, Screen.Profile.route, Screen.Appointments.route, Screen.Chats.route -&gt; false&#10;        Screen.Settings.route -&gt; settingsUiState.currentScreen != SettingsScreen.Main&#10;        else -&gt; navController.previousBackStackEntry != null&#10;    }&#10;&#10;    val showFAB = when (currentRoute) {&#10;        Screen.Home.route, Screen.Patients.route -&gt; true&#10;        else -&gt; false&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = modifier,&#10;        containerColor = BackgroundColor,&#10;        bottomBar = {&#10;            if (showBottomBar) {&#10;                DentelBottomBar(&#10;                    currentRoute = currentRoute,&#10;                    onTabSelected = { screen -&gt;&#10;                        if (currentRoute != screen.route) {&#10;                            navController.navigate(screen.route) {&#10;                                popUpTo(Screen.Home.route) { inclusive = false }&#10;                                launchSingleTop = true&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        },&#10;        topBar = {&#10;            if (showTopBar) {&#10;                if (currentRoute == Screen.Settings.route) {&#10;                    DentaryTopBar(&#10;                        navController = navController,&#10;                        showBackButton = settingsUiState.currentScreen != SettingsScreen.Main,&#10;                        onBackClick = { settingsViewModel.navigateBack() },&#10;                        onNavDrawerClicked = {}&#10;                    )&#10;                } else {&#10;                    DentaryTopBar(&#10;                        navController = navController,&#10;                        showBackButton = topBarShowBackButton,&#10;                        onBackClick = { navController.popBackStack() },&#10;                        onNavDrawerClicked = {}&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        floatingActionButton = {&#10;            if (showFAB) {&#10;                IconButton(&#10;                    onClick = {&#10;                        navController.navigate(Screen.AddPatient.route)&#10;                    },&#10;                    colors = IconButtonDefaults.filledIconButtonColors(&#10;                        containerColor = DentaryBlue,&#10;                        contentColor = Color.White&#10;                    ),&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Rounded.Add,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        floatingActionButtonPosition = FabPosition.End&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = Screen.Splash.route,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            composable(route = Screen.Splash.route) {&#10;                SplashScreen(&#10;                    onNavigateToHome = {&#10;                        navController.navigate(Screen.Home.route) {&#10;                            popUpTo(Screen.Splash.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                    onNavigateToLogin = {&#10;                        navController.navigate(Screen.Login.route) {&#10;                            popUpTo(Screen.Splash.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                )&#10;            }&#10;            composable(route = Screen.Login.route) {&#10;                LoginScreen(&#10;                    onCreateNewAccountClick = {&#10;                        navController.navigate(Screen.Register.route)&#10;                    },&#10;                    onForgetPasswordClick = {&#10;                        navController.navigate(Screen.PasswordReset.route)&#10;                    },&#10;                    onLoginSuccess = {&#10;                        navController.navigate(Screen.Home.route) {&#10;                            popUpTo(Screen.Login.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                )&#10;            }&#10;            composable(route = Screen.Register.route) {&#10;                RegisterScreen(&#10;                    onLoginClick = {&#10;                        navController.navigate(Screen.Login.route)&#10;                    },&#10;                    onNavigateToEmailVerification = { email -&gt;&#10;                        navController.navigate(Screen.EmailVerification.createRoute(email)) {&#10;                            popUpTo(Screen.Register.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                )&#10;            }&#10;            composable(&#10;                route = Screen.EmailVerification.route,&#10;                arguments = listOf(navArgument(&quot;email&quot;) { type = NavType.StringType })&#10;            ) {&#10;                EmailVerificationScreen(&#10;                    onVerificationSuccess = {&#10;                        navController.navigate(Screen.Home.route) {&#10;                            popUpTo(Screen.EmailVerification.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                    onNavigateBack = {&#10;                        navController.popBackStack()&#10;                    }&#10;                )&#10;            }&#10;            composable(route = Screen.PasswordReset.route) {&#10;                PasswordResetScreen(&#10;                    onNavigateToLogin = {&#10;                        navController.navigate(Screen.Login.route) {&#10;                            popUpTo(Screen.PasswordReset.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                    onPasswordResetSuccess = {&#10;                        navController.navigate(Screen.Login.route) {&#10;                            popUpTo(Screen.PasswordReset.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                )&#10;            }&#10;            composable(route = Screen.Home.route) {&#10;                HomeScreen(&#10;                    onNavigateToPatients = {&#10;                        navController.navigate(Screen.Patients.route)&#10;                    }&#10;                )&#10;            }&#10;            composable(route = Screen.Patients.route) {&#10;                PatientsScreen(&#10;                    onNavigateBack = {&#10;                        navController.popBackStack()&#10;                    }&#10;                )&#10;            }&#10;            composable(route = Screen.Profile.route) {&#10;                ProfileScreen()&#10;            }&#10;            composable(route = Screen.Appointments.route) {&#10;                // Appointments screen content&#10;            }&#10;            composable(route = Screen.Chats.route) {&#10;                // Chats screen content&#10;            }&#10;            composable(route = Screen.Settings.route) {&#10;                SettingsScreen(viewModel = settingsViewModel)&#10;            }&#10;            composable(route = Screen.AddPatient.route) {&#10;                AddPatientScreen(&#10;                    onNavigateBack = {&#10;                        navController.popBackStack()&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.m7md7sn.dentary.presentation.navigation&#10;&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.rounded.Add&#10;import androidx.compose.material3.FabPosition&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.navArgument&#10;import com.m7md7sn.dentary.data.model.Screen&#10;import com.m7md7sn.dentary.presentation.theme.BackgroundColor&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;import com.m7md7sn.dentary.presentation.ui.addpatient.AddPatientScreen&#10;import com.m7md7sn.dentary.presentation.ui.auth.emailverification.EmailVerificationScreen&#10;import com.m7md7sn.dentary.presentation.ui.auth.login.LoginScreen&#10;import com.m7md7sn.dentary.presentation.ui.auth.passwordreset.PasswordResetScreen&#10;import com.m7md7sn.dentary.presentation.ui.auth.register.RegisterScreen&#10;import com.m7md7sn.dentary.presentation.ui.home.HomeScreen&#10;import com.m7md7sn.dentary.presentation.ui.splash.SplashScreen&#10;import com.m7md7sn.dentary.presentation.ui.patients.PatientsScreen&#10;import com.m7md7sn.dentary.presentation.ui.profile.ProfileScreen&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsScreen&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsViewModel&#10;&#10;@Composable&#10;fun DentaryNavHost(&#10;    navController: NavHostController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    val settingsViewModel: SettingsViewModel = hiltViewModel()&#10;    val settingsUiState by settingsViewModel.uiState.collectAsState()&#10;&#10;    val showBottomBar = when (currentRoute) {&#10;        Screen.Home.route, Screen.Profile.route, Screen.Settings.route, Screen.Appointments.route, Screen.Chats.route -&gt; true&#10;        else -&gt; false&#10;    }&#10;    val showTopBar = when (currentRoute) {&#10;        Screen.Splash.route, Screen.Login.route, Screen.Register.route, Screen.EmailVerification.route, Screen.PasswordReset.route -&gt; false&#10;        else -&gt; true&#10;    }&#10;&#10;    val topBarShowBackButton: Boolean = when (currentRoute) {&#10;        Screen.Home.route, Screen.Profile.route, Screen.Appointments.route, Screen.Chats.route -&gt; false&#10;        Screen.Settings.route -&gt; settingsUiState.currentScreen != SettingsScreen.Main&#10;        else -&gt; navController.previousBackStackEntry != null&#10;    }&#10;&#10;    val showFAB = when (currentRoute) {&#10;        Screen.Home.route, Screen.Patients.route -&gt; true&#10;        else -&gt; false&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = modifier,&#10;        containerColor = BackgroundColor,&#10;        bottomBar = {&#10;            if (showBottomBar) {&#10;                DentelBottomBar(&#10;                    currentRoute = currentRoute,&#10;                    onTabSelected = { screen -&gt;&#10;                        if (currentRoute != screen.route) {&#10;                            navController.navigate(screen.route) {&#10;                                popUpTo(Screen.Home.route) { inclusive = false }&#10;                                launchSingleTop = true&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        },&#10;        topBar = {&#10;            if (showTopBar) {&#10;                if (currentRoute == Screen.Settings.route) {&#10;                    DentaryTopBar(&#10;                        navController = navController,&#10;                        showBackButton = settingsUiState.currentScreen != SettingsScreen.Main,&#10;                        onBackClick = { settingsViewModel.navigateBack() },&#10;                        onNavDrawerClicked = {}&#10;                    )&#10;                } else {&#10;                    DentaryTopBar(&#10;                        navController = navController,&#10;                        showBackButton = topBarShowBackButton,&#10;                        onBackClick = { navController.popBackStack() },&#10;                        onNavDrawerClicked = {}&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        floatingActionButton = {&#10;            if (showFAB) {&#10;                IconButton(&#10;                    onClick = {&#10;                        navController.navigate(Screen.AddPatient.route)&#10;                    },&#10;                    colors = IconButtonDefaults.filledIconButtonColors(&#10;                        containerColor = DentaryBlue,&#10;                        contentColor = Color.White&#10;                    ),&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Rounded.Add,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        floatingActionButtonPosition = FabPosition.End&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = Screen.Splash.route,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            composable(route = Screen.Splash.route) {&#10;                SplashScreen(&#10;                    onNavigateToHome = {&#10;                        navController.navigate(Screen.Home.route) {&#10;                            popUpTo(Screen.Splash.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                    onNavigateToLogin = {&#10;                        navController.navigate(Screen.Login.route) {&#10;                            popUpTo(Screen.Splash.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                )&#10;            }&#10;            composable(route = Screen.Login.route) {&#10;                LoginScreen(&#10;                    onCreateNewAccountClick = {&#10;                        navController.navigate(Screen.Register.route)&#10;                    },&#10;                    onForgetPasswordClick = {&#10;                        navController.navigate(Screen.PasswordReset.route)&#10;                    },&#10;                    onLoginSuccess = {&#10;                        navController.navigate(Screen.Home.route) {&#10;                            popUpTo(Screen.Login.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                )&#10;            }&#10;            composable(route = Screen.Register.route) {&#10;                RegisterScreen(&#10;                    onLoginClick = {&#10;                        navController.navigate(Screen.Login.route)&#10;                    },&#10;                    onNavigateToEmailVerification = { email -&gt;&#10;                        navController.navigate(Screen.EmailVerification.createRoute(email)) {&#10;                            popUpTo(Screen.Register.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                )&#10;            }&#10;            composable(&#10;                route = Screen.EmailVerification.route,&#10;                arguments = listOf(navArgument(&quot;email&quot;) { type = NavType.StringType })&#10;            ) {&#10;                EmailVerificationScreen(&#10;                    onVerificationSuccess = {&#10;                        navController.navigate(Screen.Home.route) {&#10;                            popUpTo(Screen.EmailVerification.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                    onNavigateBack = {&#10;                        navController.popBackStack()&#10;                    }&#10;                )&#10;            }&#10;            composable(route = Screen.PasswordReset.route) {&#10;                PasswordResetScreen(&#10;                    onNavigateToLogin = {&#10;                        navController.navigate(Screen.Login.route) {&#10;                            popUpTo(Screen.PasswordReset.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                    onPasswordResetSuccess = {&#10;                        navController.navigate(Screen.Login.route) {&#10;                            popUpTo(Screen.PasswordReset.route) { inclusive = true }&#10;                        }&#10;                    },&#10;                )&#10;            }&#10;            composable(route = Screen.Home.route) {&#10;                HomeScreen(&#10;                    onNavigateToPatients = {&#10;                        navController.navigate(Screen.Patients.route)&#10;                    }&#10;                )&#10;            }&#10;            composable(route = Screen.Patients.route) {&#10;                PatientsScreen(&#10;                    onNavigateBack = {&#10;                        navController.popBackStack()&#10;                    }&#10;                )&#10;            }&#10;            composable(route = Screen.Profile.route) {&#10;                ProfileScreen()&#10;            }&#10;            composable(route = Screen.Appointments.route) {&#10;                // Appointments screen content&#10;            }&#10;            composable(route = Screen.Chats.route) {&#10;                // Chats screen content&#10;            }&#10;            composable(route = Screen.Settings.route) {&#10;                SettingsScreen(&#10;                    viewModel = settingsViewModel,&#10;                    onNavigateToLogin = {&#10;                        navController.navigate(Screen.Login.route) {&#10;                            popUpTo(0) { inclusive = true }&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;            composable(route = Screen.AddPatient.route) {&#10;                AddPatientScreen(&#10;                    onNavigateBack = {&#10;                        navController.popBackStack()&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/SettingsScreen.kt" />
              <option name="originalContent" value="package com.m7md7sn.dentary.presentation.ui.settings&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.m7md7sn.dentary.presentation.theme.BackgroundColor&#10;import com.m7md7sn.dentary.presentation.theme.DentaryTheme&#10;import com.m7md7sn.dentary.presentation.ui.settings.components.DoctorAndClinicInfoSettings&#10;import com.m7md7sn.dentary.presentation.ui.settings.components.PasswordChangeSettings&#10;import com.m7md7sn.dentary.presentation.ui.settings.components.RingtoneCustomizationSettings&#10;import com.m7md7sn.dentary.presentation.ui.settings.components.SettingsContent&#10;&#10;@Composable&#10;fun SettingsScreen(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToLogin: () -&gt; Unit = {},&#10;    viewModel: SettingsViewModel = hiltViewModel()&#10;) {&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scrollState = rememberScrollState()&#10;    val focusManager = LocalFocusManager.current&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    Surface(&#10;        color = BackgroundColor,&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(scrollState, enabled = true)&#10;                    .padding(vertical = 8.dp, horizontal = 28.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;            ) {&#10;                when (uiState.currentScreen) {&#10;                    is SettingsScreen.Main -&gt; {&#10;                        SettingsContent(&#10;                            onNavigateToScreen = { screen -&gt;&#10;                                viewModel.navigateToScreen(screen)&#10;                            },&#10;                            onLogout = {&#10;                                viewModel.logout(onNavigateToLogin)&#10;                            }&#10;                        )&#10;                    }&#10;                    is SettingsScreen.EditDoctorAndClinicInfo -&gt; {&#10;                        DoctorAndClinicInfoSettings(&#10;                            focusManager = focusManager&#10;                        )&#10;                    }&#10;                    is SettingsScreen.ChangePassword -&gt; {&#10;                        PasswordChangeSettings(&#10;                            focusManager = focusManager&#10;                        )&#10;                    }&#10;                    is SettingsScreen.RingtoneCustomization -&gt; {&#10;                        RingtoneCustomizationSettings()&#10;                    }&#10;                    // For screens that are not implemented yet, just show main content&#10;                    else -&gt; {&#10;                        SettingsContent(&#10;                            onNavigateToScreen = { screen -&gt;&#10;                                viewModel.navigateToScreen(screen)&#10;                            },&#10;                            onLogout = {&#10;                                viewModel.logout(onNavigateToLogin)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            SnackbarHost(&#10;                hostState = snackbarHostState,&#10;                modifier = Modifier.align(Alignment.BottomCenter),&#10;            )&#10;        }&#10;&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;private fun SettingsScreenPreviewEn() {&#10;    DentaryTheme {&#10;        SettingsScreen()&#10;    }&#10;}&#10;&#10;@Preview(locale = &quot;ar&quot;)&#10;@Composable&#10;private fun SettingsScreenPreviewAr() {&#10;    DentaryTheme {&#10;        SettingsScreen()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.m7md7sn.dentary.presentation.ui.settings&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.m7md7sn.dentary.presentation.theme.BackgroundColor&#10;import com.m7md7sn.dentary.presentation.theme.DentaryTheme&#10;import com.m7md7sn.dentary.presentation.ui.settings.components.DoctorAndClinicInfoSettings&#10;import com.m7md7sn.dentary.presentation.ui.settings.components.LogoutConfirmationDialog&#10;import com.m7md7sn.dentary.presentation.ui.settings.components.PasswordChangeSettings&#10;import com.m7md7sn.dentary.presentation.ui.settings.components.RingtoneCustomizationSettings&#10;import com.m7md7sn.dentary.presentation.ui.settings.components.SettingsContent&#10;&#10;@Composable&#10;fun SettingsScreen(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToLogin: () -&gt; Unit = {},&#10;    viewModel: SettingsViewModel = hiltViewModel()&#10;) {&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scrollState = rememberScrollState()&#10;    val focusManager = LocalFocusManager.current&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    // Show logout confirmation dialog&#10;    if (uiState.showLogoutConfirmDialog) {&#10;        LogoutConfirmationDialog(&#10;            onConfirm = { viewModel.confirmLogout(onNavigateToLogin) },&#10;            onDismiss = { viewModel.hideLogoutConfirmDialog() }&#10;        )&#10;    }&#10;&#10;    Surface(&#10;        color = BackgroundColor,&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(scrollState, enabled = true)&#10;                    .padding(vertical = 8.dp, horizontal = 28.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;            ) {&#10;                when (uiState.currentScreen) {&#10;                    is SettingsScreen.Main -&gt; {&#10;                        SettingsContent(&#10;                            onNavigateToScreen = { screen -&gt;&#10;                                viewModel.navigateToScreen(screen)&#10;                            },&#10;                            onLogout = {&#10;                                viewModel.showLogoutConfirmDialog()&#10;                            }&#10;                        )&#10;                    }&#10;                    is SettingsScreen.EditDoctorAndClinicInfo -&gt; {&#10;                        DoctorAndClinicInfoSettings(&#10;                            focusManager = focusManager&#10;                        )&#10;                    }&#10;                    is SettingsScreen.ChangePassword -&gt; {&#10;                        PasswordChangeSettings(&#10;                            focusManager = focusManager&#10;                        )&#10;                    }&#10;                    is SettingsScreen.RingtoneCustomization -&gt; {&#10;                        RingtoneCustomizationSettings()&#10;                    }&#10;                    // For screens that are not implemented yet, just show main content&#10;                    else -&gt; {&#10;                        SettingsContent(&#10;                            onNavigateToScreen = { screen -&gt;&#10;                                viewModel.navigateToScreen(screen)&#10;                            },&#10;                            onLogout = {&#10;                                viewModel.showLogoutConfirmDialog()&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            SnackbarHost(&#10;                hostState = snackbarHostState,&#10;                modifier = Modifier.align(Alignment.BottomCenter),&#10;            )&#10;        }&#10;&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;private fun SettingsScreenPreviewEn() {&#10;    DentaryTheme {&#10;        SettingsScreen()&#10;    }&#10;}&#10;&#10;@Preview(locale = &quot;ar&quot;)&#10;@Composable&#10;private fun SettingsScreenPreviewAr() {&#10;    DentaryTheme {&#10;        SettingsScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/SettingsUiState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/SettingsUiState.kt" />
              <option name="originalContent" value="package com.m7md7sn.dentary.presentation.ui.settings&#10;&#10;sealed class SettingsScreen {&#10;    object Main : SettingsScreen()&#10;    object EditDoctorAndClinicInfo : SettingsScreen()&#10;    object ChangePassword : SettingsScreen()&#10;    object RingtoneCustomization : SettingsScreen()&#10;    object Language : SettingsScreen()&#10;    object DataBackup : SettingsScreen()&#10;    object FAQ : SettingsScreen()&#10;    object ContactSupport : SettingsScreen()&#10;}&#10;&#10;data class SettingsUiState(&#10;    val isLoading: Boolean = false,&#10;    val currentScreen: SettingsScreen = SettingsScreen.Main,&#10;)" />
              <option name="updatedContent" value="package com.m7md7sn.dentary.presentation.ui.settings&#10;&#10;sealed class SettingsScreen {&#10;    object Main : SettingsScreen()&#10;    object EditDoctorAndClinicInfo : SettingsScreen()&#10;    object ChangePassword : SettingsScreen()&#10;    object RingtoneCustomization : SettingsScreen()&#10;    object Language : SettingsScreen()&#10;    object DataBackup : SettingsScreen()&#10;    object FAQ : SettingsScreen()&#10;    object ContactSupport : SettingsScreen()&#10;}&#10;&#10;data class SettingsUiState(&#10;    val isLoading: Boolean = false,&#10;    val currentScreen: SettingsScreen = SettingsScreen.Main,&#10;    val showLogoutConfirmDialog: Boolean = false,&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/SettingsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/SettingsViewModel.kt" />
              <option name="originalContent" value="package com.m7md7sn.dentary.presentation.ui.settings&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.m7md7sn.dentary.data.repository.AuthRepository&#10;import com.m7md7sn.dentary.utils.Result&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class SettingsViewModel @Inject constructor(&#10;    private val authRepository: AuthRepository&#10;) : ViewModel() {&#10;&#10;    private var _uiState = MutableStateFlow(SettingsUiState())&#10;    val uiState: StateFlow&lt;SettingsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    fun navigateToScreen(screen: SettingsScreen) {&#10;        _uiState.value = uiState.value.copy(currentScreen = screen)&#10;    }&#10;&#10;    fun navigateBack() {&#10;        _uiState.value = uiState.value.copy(currentScreen = SettingsScreen.Main)&#10;    }&#10;&#10;    fun logout(onLogoutSuccess: () -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _uiState.value = uiState.value.copy(isLoading = true)&#10;&#10;            when (val result = authRepository.signOut()) {&#10;                is Result.Success -&gt; {&#10;                    _uiState.value = uiState.value.copy(isLoading = false)&#10;                    onLogoutSuccess()&#10;                }&#10;                is Result.Error -&gt; {&#10;                    _uiState.value = uiState.value.copy(isLoading = false)&#10;                    // Handle error if needed - for now we'll still call onLogoutSuccess&#10;                    // since local logout should always work&#10;                    onLogoutSuccess()&#10;                }&#10;                is Result.Loading -&gt; {&#10;                    // Loading state is already set above&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    init {&#10;        _uiState.value = SettingsUiState(currentScreen = SettingsScreen.Main)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.m7md7sn.dentary.presentation.ui.settings&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.m7md7sn.dentary.data.repository.AuthRepository&#10;import com.m7md7sn.dentary.utils.Result&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class SettingsViewModel @Inject constructor(&#10;    private val authRepository: AuthRepository&#10;) : ViewModel() {&#10;&#10;    private var _uiState = MutableStateFlow(SettingsUiState())&#10;    val uiState: StateFlow&lt;SettingsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    fun navigateToScreen(screen: SettingsScreen) {&#10;        _uiState.value = uiState.value.copy(currentScreen = screen)&#10;    }&#10;&#10;    fun navigateBack() {&#10;        _uiState.value = uiState.value.copy(currentScreen = SettingsScreen.Main)&#10;    }&#10;&#10;    fun showLogoutConfirmDialog() {&#10;        _uiState.value = uiState.value.copy(showLogoutConfirmDialog = true)&#10;    }&#10;&#10;    fun hideLogoutConfirmDialog() {&#10;        _uiState.value = uiState.value.copy(showLogoutConfirmDialog = false)&#10;    }&#10;&#10;    fun confirmLogout(onLogoutSuccess: () -&gt; Unit) {&#10;        hideLogoutConfirmDialog()&#10;        logout(onLogoutSuccess)&#10;    }&#10;&#10;    private fun logout(onLogoutSuccess: () -&gt; Unit) {&#10;        viewModelScope.launch {&#10;            _uiState.value = uiState.value.copy(isLoading = true)&#10;&#10;            when (val result = authRepository.signOut()) {&#10;                is Result.Success -&gt; {&#10;                    _uiState.value = uiState.value.copy(isLoading = false)&#10;                    onLogoutSuccess()&#10;                }&#10;                is Result.Error -&gt; {&#10;                    _uiState.value = uiState.value.copy(isLoading = false)&#10;                    // Handle error if needed - for now we'll still call onLogoutSuccess&#10;                    // since local logout should always work&#10;                    onLogoutSuccess()&#10;                }&#10;                is Result.Loading -&gt; {&#10;                    // Loading state is already set above&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    init {&#10;        _uiState.value = SettingsUiState(currentScreen = SettingsScreen.Main)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/AccountSettings.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/AccountSettings.kt" />
              <option name="originalContent" value="package com.m7md7sn.dentary.presentation.ui.settings.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.focus.FocusDirection&#10;import androidx.compose.ui.focus.FocusManager&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.m7md7sn.dentary.R&#10;import com.m7md7sn.dentary.presentation.theme.AlexandriaBold&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;import com.m7md7sn.dentary.presentation.ui.auth.register.compoenents.SectionTitle&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsScreen&#10;&#10;@Composable&#10;fun AccountSettings(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToScreen: (SettingsScreen) -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.account_settings),&#10;            style = TextStyle(&#10;                fontSize = 17.sp,&#10;                fontFamily = AlexandriaBold,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DentaryBlue,&#10;            )&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.edit_doctor_clinic_info),&#10;            onClick = {&#10;                onNavigateToScreen(SettingsScreen.EditDoctorAndClinicInfo)&#10;            }&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.change_password),&#10;            onClick = {&#10;                onNavigateToScreen(SettingsScreen.ChangePassword)&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DoctorAndClinicInfoSettings(&#10;    focusManager: FocusManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        SectionTitle(&#10;            title = R.string.doctor_info,&#10;            titleIcon = R.drawable.ic_doctor,&#10;        )&#10;        Spacer(Modifier.height(20.dp))&#10;        SettingsTextField(&#10;            value = &quot;علي حسن علي محمد&quot;,&#10;            icon = R.drawable.ic_user,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Text&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            ),&#10;&#10;            )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;التخصص&quot;,&#10;            icon = R.drawable.ic_specialization,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Text&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;Johnsondoe@nomail.com&quot;,&#10;            icon = R.drawable.ic_email,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Done,&#10;                keyboardType = KeyboardType.Email&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onDone = {&#10;                    focusManager.clearFocus()&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(22.dp))&#10;        SectionTitle(&#10;            title = R.string.clinic_information,&#10;            titleIcon = R.drawable.ic_clinic,&#10;        )&#10;        Spacer(Modifier.height(20.dp))&#10;        SettingsTextField(&#10;            value = &quot;مركز دنتاري لطب الأسنان&quot;,&#10;            icon = R.drawable.ic_clinic_name,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Text&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;0123456789&quot;,&#10;            icon = R.drawable.ic_phone,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Phone&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;المنطقة&quot;,&#10;            icon = R.drawable.ic_location,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Text&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;شعار العيادة&quot;,&#10;            icon = R.drawable.ic_clinic_logo,&#10;            modifier = Modifier.height(66.dp)&#10;        )&#10;        Spacer(Modifier.height(22.dp))&#10;        SettingsActionButtons(&#10;            onSaveClick = { /* Handle save action */ },&#10;            onCancelClick = { /* Handle cancel action */ }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PasswordChangeSettings(&#10;    focusManager: FocusManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        SectionTitle(&#10;            title = R.string.change_password,&#10;            titleIcon = R.drawable.ic_lock,&#10;        )&#10;        Spacer(Modifier.height(20.dp))&#10;        SettingsTextFieldNoIcon(&#10;            placeholder = stringResource(R.string.current_password),&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Password&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextFieldNoIcon(&#10;            placeholder = stringResource(R.string.new_password),&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Password&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextFieldNoIcon(&#10;            placeholder = stringResource(R.string.confirm_new_password),&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Done,&#10;                keyboardType = KeyboardType.Password&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onDone = {&#10;                    focusManager.clearFocus()&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(22.dp))&#10;        SettingsActionButtons(&#10;            onSaveClick = { /* Handle save action */ },&#10;            onCancelClick = { /* Handle cancel action */ }&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.m7md7sn.dentary.presentation.ui.settings.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.focus.FocusDirection&#10;import androidx.compose.ui.focus.FocusManager&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.m7md7sn.dentary.R&#10;import com.m7md7sn.dentary.presentation.theme.AlexandriaBold&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;import com.m7md7sn.dentary.presentation.ui.auth.register.compoenents.SectionTitle&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsScreen&#10;&#10;@Composable&#10;fun AccountSettings(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToScreen: (SettingsScreen) -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.account_settings),&#10;            style = TextStyle(&#10;                fontSize = 17.sp,&#10;                fontFamily = AlexandriaBold,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DentaryBlue,&#10;            )&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.edit_doctor_clinic_info),&#10;            onClick = {&#10;                onNavigateToScreen(SettingsScreen.EditDoctorAndClinicInfo)&#10;            }&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.change_password),&#10;            onClick = {&#10;                onNavigateToScreen(SettingsScreen.ChangePassword)&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DoctorAndClinicInfoSettings(&#10;    focusManager: FocusManager,&#10;    modifier: Modifier = Modifier,&#10;    onBackClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        SectionTitle(&#10;            title = R.string.doctor_info,&#10;            titleIcon = R.drawable.ic_doctor,&#10;        )&#10;        Spacer(Modifier.height(20.dp))&#10;        SettingsTextField(&#10;            value = &quot;علي حسن علي محمد&quot;,&#10;            icon = R.drawable.ic_user,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Text&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            ),&#10;&#10;            )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;التخصص&quot;,&#10;            icon = R.drawable.ic_specialization,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Text&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;Johnsondoe@nomail.com&quot;,&#10;            icon = R.drawable.ic_email,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Done,&#10;                keyboardType = KeyboardType.Email&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onDone = {&#10;                    focusManager.clearFocus()&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(22.dp))&#10;        SectionTitle(&#10;            title = R.string.clinic_information,&#10;            titleIcon = R.drawable.ic_clinic,&#10;        )&#10;        Spacer(Modifier.height(20.dp))&#10;        SettingsTextField(&#10;            value = &quot;مركز دنتاري لطب الأسنان&quot;,&#10;            icon = R.drawable.ic_clinic_name,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Text&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;0123456789&quot;,&#10;            icon = R.drawable.ic_phone,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Phone&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;المنطقة&quot;,&#10;            icon = R.drawable.ic_location,&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Text&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextField(&#10;            placeholder = &quot;شعار العيادة&quot;,&#10;            icon = R.drawable.ic_clinic_logo,&#10;            modifier = Modifier.height(66.dp)&#10;        )&#10;        Spacer(Modifier.height(22.dp))&#10;        SettingsActionButtons(&#10;            onSaveClick = { /* Handle save action */ },&#10;            onCancelClick = { /* Handle cancel action */ }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PasswordChangeSettings(&#10;    focusManager: FocusManager,&#10;    modifier: Modifier = Modifier,&#10;    onBackClick: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        SectionTitle(&#10;            title = R.string.change_password,&#10;            titleIcon = R.drawable.ic_lock,&#10;        )&#10;        Spacer(Modifier.height(20.dp))&#10;        SettingsTextFieldNoIcon(&#10;            placeholder = stringResource(R.string.current_password),&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Password&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextFieldNoIcon(&#10;            placeholder = stringResource(R.string.new_password),&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Next,&#10;                keyboardType = KeyboardType.Password&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onNext = {&#10;                    focusManager.moveFocus(&#10;                        FocusDirection.Down&#10;                    )&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(10.dp))&#10;        SettingsTextFieldNoIcon(&#10;            placeholder = stringResource(R.string.confirm_new_password),&#10;            keyboardOptions = KeyboardOptions(&#10;                imeAction = ImeAction.Done,&#10;                keyboardType = KeyboardType.Password&#10;            ),&#10;            keyboardActions = KeyboardActions(&#10;                onDone = {&#10;                    focusManager.clearFocus()&#10;                }&#10;            )&#10;        )&#10;        Spacer(Modifier.height(22.dp))&#10;        SettingsActionButtons(&#10;            onSaveClick = { /* Handle save action */ },&#10;            onCancelClick = { /* Handle cancel action */ }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/AppSettings.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/AppSettings.kt" />
              <option name="originalContent" value="package com.m7md7sn.dentary.presentation.ui.settings.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.m7md7sn.dentary.R&#10;import com.m7md7sn.dentary.presentation.theme.AlexandriaBold&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;&#10;@Composable&#10;fun AppSettings(modifier: Modifier = Modifier) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.app_settings),&#10;            style = TextStyle(&#10;                fontSize = 17.sp,&#10;                fontFamily = AlexandriaBold,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DentaryBlue,&#10;            )&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.language),&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.data_back_up),&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.m7md7sn.dentary.presentation.ui.settings.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.m7md7sn.dentary.R&#10;import com.m7md7sn.dentary.presentation.theme.AlexandriaBold&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsScreen&#10;&#10;@Composable&#10;fun AppSettings(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToScreen: (SettingsScreen) -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.app_settings),&#10;            style = TextStyle(&#10;                fontSize = 17.sp,&#10;                fontFamily = AlexandriaBold,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DentaryBlue,&#10;            )&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.language),&#10;            onClick = {&#10;                onNavigateToScreen(SettingsScreen.Language)&#10;            }&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.data_back_up),&#10;            onClick = {&#10;                onNavigateToScreen(SettingsScreen.DataBackup)&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/AppSupport.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/AppSupport.kt" />
              <option name="originalContent" value="package com.m7md7sn.dentary.presentation.ui.settings.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.m7md7sn.dentary.R&#10;import com.m7md7sn.dentary.presentation.theme.AlexandriaBold&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;&#10;@Composable&#10;fun AppSupport(modifier: Modifier = Modifier) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.help_support),&#10;            style = TextStyle(&#10;                fontSize = 17.sp,&#10;                fontFamily = AlexandriaBold,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DentaryBlue,&#10;            )&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.faq),&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.call_support),&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.m7md7sn.dentary.presentation.ui.settings.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.m7md7sn.dentary.R&#10;import com.m7md7sn.dentary.presentation.theme.AlexandriaBold&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsScreen&#10;&#10;@Composable&#10;fun AppSupport(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToScreen: (SettingsScreen) -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.Start,&#10;    ) {&#10;        Text(&#10;            text = stringResource(R.string.help_support),&#10;            style = TextStyle(&#10;                fontSize = 17.sp,&#10;                fontFamily = AlexandriaBold,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DentaryBlue,&#10;            )&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.faq),&#10;            onClick = {&#10;                onNavigateToScreen(SettingsScreen.FAQ)&#10;            }&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        SettingsItem(&#10;            text = stringResource(R.string.call_support),&#10;            onClick = {&#10;                onNavigateToScreen(SettingsScreen.ContactSupport)&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/LogoutConfirmationDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/LogoutConfirmationDialog.kt" />
              <option name="updatedContent" value="package com.m7md7sn.dentary.presentation.ui.settings.components&#10;&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;import com.m7md7sn.dentary.R&#10;import com.m7md7sn.dentary.presentation.theme.AlexandriaRegular&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;&#10;@Composable&#10;fun LogoutConfirmationDialog(&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&#10;                text = stringResource(R.string.logout_confirmation_title),&#10;                style = TextStyle(&#10;                    fontSize = 18.sp,&#10;                    fontFamily = AlexandriaRegular,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.Black&#10;                )&#10;            )&#10;        },&#10;        text = {&#10;            Text(&#10;                text = stringResource(R.string.logout_confirmation_message),&#10;                style = TextStyle(&#10;                    fontSize = 16.sp,&#10;                    fontFamily = AlexandriaRegular,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color.Gray&#10;                )&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color.Red,&#10;                    contentColor = Color.White&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = stringResource(R.string.logout),&#10;                    style = TextStyle(&#10;                        fontSize = 14.sp,&#10;                        fontFamily = AlexandriaRegular,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                )&#10;            }&#10;        },&#10;        dismissButton = {&#10;            OutlinedButton(&#10;                onClick = onDismiss,&#10;                colors = ButtonDefaults.outlinedButtonColors(&#10;                    contentColor = DentaryBlue&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = stringResource(R.string.cancel),&#10;                    style = TextStyle(&#10;                        fontSize = 14.sp,&#10;                        fontFamily = AlexandriaRegular,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/SettingsContent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/m7md7sn/dentary/presentation/ui/settings/components/SettingsContent.kt" />
              <option name="originalContent" value="package com.m7md7sn.dentary.presentation.ui.settings.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.m7md7sn.dentary.R&#10;import com.m7md7sn.dentary.presentation.theme.AlexandriaBold&#10;import com.m7md7sn.dentary.presentation.theme.DentaryBlue&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsScreen&#10;&#10;@Composable&#10;fun SettingsContent(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToScreen: (SettingsScreen) -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;    ) {&#10;        SettingsTitle()&#10;        Spacer(Modifier.height(22.dp))&#10;        AccountSettings(onNavigateToScreen = onNavigateToScreen)&#10;        Spacer(Modifier.height(18.dp))&#10;        NotificationsSettings(onNavigateToScreen = onNavigateToScreen)&#10;        Spacer(Modifier.height(18.dp))&#10;        AppSettings(onNavigateToScreen = onNavigateToScreen)&#10;        Spacer(Modifier.height(18.dp))&#10;        AppSupport(onNavigateToScreen = onNavigateToScreen)&#10;        Spacer(Modifier.height(18.dp))&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalAlignment = Alignment.Start,&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.logout),&#10;                style = TextStyle(&#10;                    fontSize = 17.sp,&#10;                    fontFamily = AlexandriaBold,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.Red,&#10;                )&#10;            )&#10;            Spacer(Modifier.height(16.dp))&#10;            SettingsItem(&#10;                text = stringResource(R.string.logout),&#10;                onClick = {&#10;&#10;                }&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.m7md7sn.dentary.presentation.ui.settings.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.m7md7sn.dentary.R&#10;import com.m7md7sn.dentary.presentation.theme.AlexandriaBold&#10;import com.m7md7sn.dentary.presentation.ui.settings.SettingsScreen&#10;&#10;@Composable&#10;fun SettingsContent(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToScreen: (SettingsScreen) -&gt; Unit,&#10;    onLogout: () -&gt; Unit = {}&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;    ) {&#10;        SettingsTitle()&#10;        Spacer(Modifier.height(22.dp))&#10;        AccountSettings(onNavigateToScreen = onNavigateToScreen)&#10;        Spacer(Modifier.height(18.dp))&#10;        NotificationsSettings(onNavigateToScreen = onNavigateToScreen)&#10;        Spacer(Modifier.height(18.dp))&#10;        AppSettings(onNavigateToScreen = onNavigateToScreen)&#10;        Spacer(Modifier.height(18.dp))&#10;        AppSupport(onNavigateToScreen = onNavigateToScreen)&#10;        Spacer(Modifier.height(18.dp))&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalAlignment = Alignment.Start,&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.logout),&#10;                style = TextStyle(&#10;                    fontSize = 17.sp,&#10;                    fontFamily = AlexandriaBold,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.Red,&#10;                )&#10;            )&#10;            Spacer(Modifier.height(16.dp))&#10;            SettingsItem(&#10;                text = stringResource(R.string.logout),&#10;                onClick = onLogout&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-ar/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-ar/strings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Dentary&lt;/string&gt;&#10;    &lt;string name=&quot;logo_description&quot;&gt;Dentary Logo&lt;/string&gt;&#10;    &lt;string name=&quot;app_slogan&quot;&gt;Smart Patient Log&lt;/string&gt;&#10;    &lt;string name=&quot;login_header_description&quot;&gt;Doctor Image&lt;/string&gt;&#10;    &lt;string name=&quot;login&quot;&gt;تسجيل الدخول&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;كلمة السر&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;البريد الإلكتروني&lt;/string&gt;&#10;    &lt;string name=&quot;forget_password&quot;&gt;نسيت كلمة السر؟&lt;/string&gt;&#10;    &lt;string name=&quot;join&quot;&gt;دخول&lt;/string&gt;&#10;    &lt;string name=&quot;have_no_account&quot;&gt;لا تملك حساب؟&lt;/string&gt;&#10;    &lt;string name=&quot;create_new_account&quot;&gt;أنشئ حسابا جديدا&lt;/string&gt;&#10;    &lt;string name=&quot;username&quot;&gt;اسم المستخدم&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;إنشاء حساب&lt;/string&gt;&#10;    &lt;string name=&quot;register_information&quot;&gt;معلومات التسجيل&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;تأكيد كلمة السر&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_information&quot;&gt;بيانات العيادة&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_name&quot;&gt;اسم العيادة&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_phone_number&quot;&gt;رقم التواصل&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_address&quot;&gt;المنطقة&lt;/string&gt;&#10;    &lt;string name=&quot;register_confirm&quot;&gt;تسجيل&lt;/string&gt;&#10;    &lt;string name=&quot;have_account&quot;&gt;لديك حساب؟&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_your_email&quot;&gt;تأكيد البريد الالكتروني&lt;/string&gt;&#10;    &lt;string name=&quot;did_not_receive_email&quot;&gt;لم يصلك الرابط؟&lt;/string&gt;&#10;    &lt;string name=&quot;resend&quot;&gt;إعادة الإرسال&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_email&quot;&gt;تأكيد&lt;/string&gt;&#10;    &lt;string name=&quot;email_verification_message&quot;&gt;اضغط على الرابط في البريد الالكتروني\n لتأكيــد البريــد الالكتــرونــي&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password&quot;&gt;تغيير كلمة السر&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password_message&quot;&gt;ادخل البريد الإلكتروني وسيتم ارسال رابط\n لتغيير كلمة السر&lt;/string&gt;&#10;    &lt;string name=&quot;send&quot;&gt;إرسال&lt;/string&gt;&#10;    &lt;string name=&quot;add_patient&quot;&gt;إضافة مريض&lt;/string&gt;&#10;    &lt;string name=&quot;full_name&quot;&gt;الاسم كامل&lt;/string&gt;&#10;    &lt;string name=&quot;age&quot;&gt;العمر&lt;/string&gt;&#10;    &lt;string name=&quot;phone_number&quot;&gt;رقم الهاتف&lt;/string&gt;&#10;    &lt;string name=&quot;email_optional&quot;&gt;البريد الإلكتروني ( اختياري )&lt;/string&gt;&#10;    &lt;string name=&quot;gender_male&quot;&gt;ذكر&lt;/string&gt;&#10;    &lt;string name=&quot;gender_female&quot;&gt;أنثى&lt;/string&gt;&#10;    &lt;string name=&quot;save_patient&quot;&gt;حفظ المريض&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;الغاء&lt;/string&gt;&#10;    &lt;string name=&quot;patients&quot;&gt;المرضى&lt;/string&gt;&#10;    &lt;string name=&quot;search_patient&quot;&gt;البحث عن مريض&lt;/string&gt;&#10;    &lt;string name=&quot;see_all&quot;&gt;مشاهدة الكل&lt;/string&gt;&#10;    &lt;string name=&quot;recent_added_patients&quot;&gt;المرضى الذين ضفتهم مؤخراً&lt;/string&gt;&#10;    &lt;string name=&quot;appointments&quot;&gt;المواعيد&lt;/string&gt;&#10;    &lt;string name=&quot;today&quot;&gt;اليوم&lt;/string&gt;&#10;    &lt;string name=&quot;upcoming&quot;&gt;قادم&lt;/string&gt;&#10;    &lt;string name=&quot;verification_code&quot;&gt;رمز التحقق&lt;/string&gt;&#10;    &lt;string name=&quot;welcome&quot;&gt;مرحبا بك د. &lt;/string&gt;&#10;    &lt;string name=&quot;profile&quot;&gt;الصفحة الشخصية&lt;/string&gt;&#10;    &lt;string name=&quot;total_patients&quot;&gt;اجمالي المرضى لديك&lt;/string&gt;&#10;    &lt;string name=&quot;patient&quot;&gt;مريض&lt;/string&gt;&#10;    &lt;string name=&quot;settings&quot;&gt;الإعدادات&lt;/string&gt;&#10;    &lt;string name=&quot;account_settings&quot;&gt;إعدادات الحساب&lt;/string&gt;&#10;    &lt;string name=&quot;edit_doctor_clinic_info&quot;&gt;تحرير معلومات الطبيب والعيادة&lt;/string&gt;&#10;    &lt;string name=&quot;change_password&quot;&gt;تغيير كلمة المرور&lt;/string&gt;&#10;    &lt;string name=&quot;notifications_settings&quot;&gt;إعدادات الإشعارات&lt;/string&gt;&#10;    &lt;string name=&quot;enable_reminders&quot;&gt;تفعيل إشعارات المواعيد&lt;/string&gt;&#10;    &lt;string name=&quot;ringnotes_customization&quot;&gt;تخصيص الصوتيات&lt;/string&gt;&#10;    &lt;string name=&quot;app_settings&quot;&gt;إعدادات التطبيق&lt;/string&gt;&#10;    &lt;string name=&quot;language&quot;&gt;اللغة&lt;/string&gt;&#10;    &lt;string name=&quot;data_back_up&quot;&gt;نسخ الاحتياطي للبيانات&lt;/string&gt;&#10;    &lt;string name=&quot;help_support&quot;&gt;الدعم والمساعدة&lt;/string&gt;&#10;    &lt;string name=&quot;faq&quot;&gt;الاسئلة الشائعة&lt;/string&gt;&#10;    &lt;string name=&quot;call_support&quot;&gt;الاتصال بالدعم&lt;/string&gt;&#10;    &lt;string name=&quot;doctor_info&quot;&gt;معلومات الطبيب&lt;/string&gt;&#10;    &lt;string name=&quot;confirm&quot;&gt;تأكيد&lt;/string&gt;&#10;    &lt;string name=&quot;current_password&quot;&gt;كلمة المرور الحالية&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_new_password&quot;&gt;تأكيد كلمة المرور الجديدة&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Logout&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Dentary&lt;/string&gt;&#10;    &lt;string name=&quot;logo_description&quot;&gt;Dentary Logo&lt;/string&gt;&#10;    &lt;string name=&quot;app_slogan&quot;&gt;Smart Patient Log&lt;/string&gt;&#10;    &lt;string name=&quot;login_header_description&quot;&gt;Doctor Image&lt;/string&gt;&#10;    &lt;string name=&quot;login&quot;&gt;تسجيل الدخول&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;كلمة السر&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;البريد الإلكتروني&lt;/string&gt;&#10;    &lt;string name=&quot;forget_password&quot;&gt;نسيت كلمة السر؟&lt;/string&gt;&#10;    &lt;string name=&quot;join&quot;&gt;دخول&lt;/string&gt;&#10;    &lt;string name=&quot;have_no_account&quot;&gt;لا تملك حساب؟&lt;/string&gt;&#10;    &lt;string name=&quot;create_new_account&quot;&gt;أنشئ حسابا جديدا&lt;/string&gt;&#10;    &lt;string name=&quot;username&quot;&gt;اسم المستخدم&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;إنشاء حساب&lt;/string&gt;&#10;    &lt;string name=&quot;register_information&quot;&gt;معلومات التسجيل&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;تأكيد كلمة السر&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_information&quot;&gt;بيانات العيادة&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_name&quot;&gt;اسم العيادة&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_phone_number&quot;&gt;رقم التواصل&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_address&quot;&gt;المنطقة&lt;/string&gt;&#10;    &lt;string name=&quot;register_confirm&quot;&gt;تسجيل&lt;/string&gt;&#10;    &lt;string name=&quot;have_account&quot;&gt;لديك حساب؟&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_your_email&quot;&gt;تأكيد البريد الالكتروني&lt;/string&gt;&#10;    &lt;string name=&quot;did_not_receive_email&quot;&gt;لم يصلك الرابط؟&lt;/string&gt;&#10;    &lt;string name=&quot;resend&quot;&gt;إعادة الإرسال&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_email&quot;&gt;تأكيد&lt;/string&gt;&#10;    &lt;string name=&quot;email_verification_message&quot;&gt;اضغط على الرابط في البريد الالكتروني\n لتأكيــد البريــد الالكتــرونــي&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password&quot;&gt;تغيير كلمة السر&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password_message&quot;&gt;ادخل البريد الإلكتروني وسيتم ارسال رابط\n لتغيير كلمة السر&lt;/string&gt;&#10;    &lt;string name=&quot;send&quot;&gt;إرسال&lt;/string&gt;&#10;    &lt;string name=&quot;add_patient&quot;&gt;إضافة مريض&lt;/string&gt;&#10;    &lt;string name=&quot;full_name&quot;&gt;الاسم كامل&lt;/string&gt;&#10;    &lt;string name=&quot;age&quot;&gt;العمر&lt;/string&gt;&#10;    &lt;string name=&quot;phone_number&quot;&gt;رقم الهاتف&lt;/string&gt;&#10;    &lt;string name=&quot;email_optional&quot;&gt;البريد الإلكتروني ( اختياري )&lt;/string&gt;&#10;    &lt;string name=&quot;gender_male&quot;&gt;ذكر&lt;/string&gt;&#10;    &lt;string name=&quot;gender_female&quot;&gt;أنثى&lt;/string&gt;&#10;    &lt;string name=&quot;save_patient&quot;&gt;حفظ المريض&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;الغاء&lt;/string&gt;&#10;    &lt;string name=&quot;patients&quot;&gt;المرضى&lt;/string&gt;&#10;    &lt;string name=&quot;search_patient&quot;&gt;البحث عن مريض&lt;/string&gt;&#10;    &lt;string name=&quot;see_all&quot;&gt;مشاهدة الكل&lt;/string&gt;&#10;    &lt;string name=&quot;recent_added_patients&quot;&gt;المرضى الذين ضفتهم مؤخراً&lt;/string&gt;&#10;    &lt;string name=&quot;appointments&quot;&gt;المواعيد&lt;/string&gt;&#10;    &lt;string name=&quot;today&quot;&gt;اليوم&lt;/string&gt;&#10;    &lt;string name=&quot;upcoming&quot;&gt;قادم&lt;/string&gt;&#10;    &lt;string name=&quot;verification_code&quot;&gt;رمز التحقق&lt;/string&gt;&#10;    &lt;string name=&quot;welcome&quot;&gt;مرحبا بك د. &lt;/string&gt;&#10;    &lt;string name=&quot;profile&quot;&gt;الصفحة الشخصية&lt;/string&gt;&#10;    &lt;string name=&quot;total_patients&quot;&gt;اجمالي المرضى لديك&lt;/string&gt;&#10;    &lt;string name=&quot;patient&quot;&gt;مريض&lt;/string&gt;&#10;    &lt;string name=&quot;settings&quot;&gt;الإعدادات&lt;/string&gt;&#10;    &lt;string name=&quot;account_settings&quot;&gt;إعدادات الحساب&lt;/string&gt;&#10;    &lt;string name=&quot;edit_doctor_clinic_info&quot;&gt;تحرير معلومات الطبيب والعيادة&lt;/string&gt;&#10;    &lt;string name=&quot;change_password&quot;&gt;تغيير كلمة المرور&lt;/string&gt;&#10;    &lt;string name=&quot;notifications_settings&quot;&gt;إعدادات الإشعارات&lt;/string&gt;&#10;    &lt;string name=&quot;enable_reminders&quot;&gt;تفعيل إشعارات المواعيد&lt;/string&gt;&#10;    &lt;string name=&quot;ringnotes_customization&quot;&gt;تخصيص الصوتيات&lt;/string&gt;&#10;    &lt;string name=&quot;app_settings&quot;&gt;إعدادات التطبيق&lt;/string&gt;&#10;    &lt;string name=&quot;language&quot;&gt;اللغة&lt;/string&gt;&#10;    &lt;string name=&quot;data_back_up&quot;&gt;نسخ الاحتياطي للبيانات&lt;/string&gt;&#10;    &lt;string name=&quot;help_support&quot;&gt;الدعم والمساعدة&lt;/string&gt;&#10;    &lt;string name=&quot;faq&quot;&gt;الاسئلة الشائعة&lt;/string&gt;&#10;    &lt;string name=&quot;call_support&quot;&gt;الاتصال بالدعم&lt;/string&gt;&#10;    &lt;string name=&quot;doctor_info&quot;&gt;معلومات الطبيب&lt;/string&gt;&#10;    &lt;string name=&quot;confirm&quot;&gt;تأكيد&lt;/string&gt;&#10;    &lt;string name=&quot;current_password&quot;&gt;كلمة المرور الحالية&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_new_password&quot;&gt;تأكيد كلمة المرور الجديدة&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;تسجيل الخروج&lt;/string&gt;&#10;    &lt;string name=&quot;logout_confirmation_title&quot;&gt;تأكيد تسجيل الخروج&lt;/string&gt;&#10;    &lt;string name=&quot;logout_confirmation_message&quot;&gt;هل أنت متأكد من أنك تريد تسجيل الخروج؟ ستحتاج إلى تسجيل الدخول مرة أخرى للوصول إلى حسابك.&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Dentary&lt;/string&gt;&#10;    &lt;string name=&quot;logo_description&quot;&gt;Dentary Logo&lt;/string&gt;&#10;    &lt;string name=&quot;app_slogan&quot;&gt;Smart Patient Log&lt;/string&gt;&#10;    &lt;string name=&quot;login_header_description&quot;&gt;Doctor Image&lt;/string&gt;&#10;    &lt;string name=&quot;login&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email Address&lt;/string&gt;&#10;    &lt;string name=&quot;forget_password&quot;&gt;Forgot password?&lt;/string&gt;&#10;    &lt;string name=&quot;join&quot;&gt;Join&lt;/string&gt;&#10;    &lt;string name=&quot;have_no_account&quot;&gt;Don\'t have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;create_new_account&quot;&gt;Create a new account&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;register_information&quot;&gt;Registration Information&lt;/string&gt;&#10;    &lt;string name=&quot;username&quot;&gt;Username&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Confirm Password&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_information&quot;&gt;Clinic Information&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_name&quot;&gt;Clinic Name&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_phone_number&quot;&gt;Contact Number&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_address&quot;&gt;Address&lt;/string&gt;&#10;    &lt;string name=&quot;register_confirm&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;have_account&quot;&gt;Have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_your_email&quot;&gt;Confirm Your Email&lt;/string&gt;&#10;    &lt;string name=&quot;did_not_receive_email&quot;&gt;Didn\'t receive the link?&lt;/string&gt;&#10;    &lt;string name=&quot;resend&quot;&gt;Resend&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_email&quot;&gt;Confirm&lt;/string&gt;&#10;    &lt;string name=&quot;email_verification_message&quot;&gt;Click on the link in the email\nto confirm your email address&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password&quot;&gt;Reset Password&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password_message&quot;&gt;Enter your email address and we will send\na link to reset your password&lt;/string&gt;&#10;    &lt;string name=&quot;send&quot;&gt;Send&lt;/string&gt;&#10;    &lt;string name=&quot;add_patient&quot;&gt;Add Patient&lt;/string&gt;&#10;    &lt;string name=&quot;full_name&quot;&gt;Full Name&lt;/string&gt;&#10;    &lt;string name=&quot;age&quot;&gt;Age&lt;/string&gt;&#10;    &lt;string name=&quot;phone_number&quot;&gt;Phone Number&lt;/string&gt;&#10;    &lt;string name=&quot;email_optional&quot;&gt;Email Address (Optional)&lt;/string&gt;&#10;    &lt;string name=&quot;gender_male&quot;&gt;Male&lt;/string&gt;&#10;    &lt;string name=&quot;gender_female&quot;&gt;Female&lt;/string&gt;&#10;    &lt;string name=&quot;save_patient&quot;&gt;Save Patient&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Cancel&lt;/string&gt;&#10;    &lt;string name=&quot;patients&quot;&gt;Patients&lt;/string&gt;&#10;    &lt;string name=&quot;search_patient&quot;&gt;Search Patient&lt;/string&gt;&#10;    &lt;string name=&quot;see_all&quot;&gt;See All&lt;/string&gt;&#10;    &lt;string name=&quot;recent_added_patients&quot;&gt;Recently Added Patients&lt;/string&gt;&#10;    &lt;string name=&quot;appointments&quot;&gt;Appointments&lt;/string&gt;&#10;    &lt;string name=&quot;today&quot;&gt;Today&lt;/string&gt;&#10;    &lt;string name=&quot;upcoming&quot;&gt;Upcoming&lt;/string&gt;&#10;    &lt;string name=&quot;verification_code&quot;&gt;Verification Code&lt;/string&gt;&#10;    &lt;string name=&quot;welcome&quot;&gt;Welcome, Dr. &lt;/string&gt;&#10;    &lt;string name=&quot;profile&quot;&gt;Profile&lt;/string&gt;&#10;    &lt;string name=&quot;total_patients&quot;&gt;Total Patients&lt;/string&gt;&#10;    &lt;string name=&quot;patient&quot;&gt;Patient&lt;/string&gt;&#10;    &lt;string name=&quot;settings&quot;&gt;Settings&lt;/string&gt;&#10;    &lt;string name=&quot;account_settings&quot;&gt;Account Settings&lt;/string&gt;&#10;    &lt;string name=&quot;edit_doctor_clinic_info&quot;&gt;Edit Doctor and Clinic Information&lt;/string&gt;&#10;    &lt;string name=&quot;change_password&quot;&gt;Change Password&lt;/string&gt;&#10;    &lt;string name=&quot;notifications_settings&quot;&gt;Notification Settings&lt;/string&gt;&#10;    &lt;string name=&quot;enable_reminders&quot;&gt;Enable Appointment Reminders&lt;/string&gt;&#10;    &lt;string name=&quot;ringnotes_customization&quot;&gt;Sound Customization&lt;/string&gt;&#10;    &lt;string name=&quot;app_settings&quot;&gt;App Settings&lt;/string&gt;&#10;    &lt;string name=&quot;language&quot;&gt;Language&lt;/string&gt;&#10;    &lt;string name=&quot;data_back_up&quot;&gt;Data Backup&lt;/string&gt;&#10;    &lt;string name=&quot;help_support&quot;&gt;Help &amp;amp; Support&lt;/string&gt;&#10;    &lt;string name=&quot;faq&quot;&gt;Frequently Asked Questions&lt;/string&gt;&#10;    &lt;string name=&quot;call_support&quot;&gt;Contact Support&lt;/string&gt;&#10;    &lt;string name=&quot;doctor_info&quot;&gt;معلومات الطبيب&lt;/string&gt;&#10;    &lt;string name=&quot;confirm&quot;&gt;تأكيد&lt;/string&gt;&#10;    &lt;string name=&quot;current_password&quot;&gt;كلمة المرور الحالية&lt;/string&gt;&#10;    &lt;string name=&quot;new_password&quot;&gt;كلمة المرور الجديدة&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_new_password&quot;&gt;تأكيد كلمة المرور الجديدة&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Logout&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Dentary&lt;/string&gt;&#10;    &lt;string name=&quot;logo_description&quot;&gt;Dentary Logo&lt;/string&gt;&#10;    &lt;string name=&quot;app_slogan&quot;&gt;Smart Patient Log&lt;/string&gt;&#10;    &lt;string name=&quot;login_header_description&quot;&gt;Doctor Image&lt;/string&gt;&#10;    &lt;string name=&quot;login&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email Address&lt;/string&gt;&#10;    &lt;string name=&quot;forget_password&quot;&gt;Forgot password?&lt;/string&gt;&#10;    &lt;string name=&quot;join&quot;&gt;Join&lt;/string&gt;&#10;    &lt;string name=&quot;have_no_account&quot;&gt;Don\'t have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;create_new_account&quot;&gt;Create a new account&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;register_information&quot;&gt;Registration Information&lt;/string&gt;&#10;    &lt;string name=&quot;username&quot;&gt;Username&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Confirm Password&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_information&quot;&gt;Clinic Information&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_name&quot;&gt;Clinic Name&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_phone_number&quot;&gt;Contact Number&lt;/string&gt;&#10;    &lt;string name=&quot;clinic_address&quot;&gt;Address&lt;/string&gt;&#10;    &lt;string name=&quot;register_confirm&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;have_account&quot;&gt;Have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_your_email&quot;&gt;Confirm Your Email&lt;/string&gt;&#10;    &lt;string name=&quot;did_not_receive_email&quot;&gt;Didn\'t receive the link?&lt;/string&gt;&#10;    &lt;string name=&quot;resend&quot;&gt;Resend&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_email&quot;&gt;Confirm&lt;/string&gt;&#10;    &lt;string name=&quot;email_verification_message&quot;&gt;Click on the link in the email\nto confirm your email address&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password&quot;&gt;Reset Password&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password_message&quot;&gt;Enter your email address and we will send\na link to reset your password&lt;/string&gt;&#10;    &lt;string name=&quot;send&quot;&gt;Send&lt;/string&gt;&#10;    &lt;string name=&quot;add_patient&quot;&gt;Add Patient&lt;/string&gt;&#10;    &lt;string name=&quot;full_name&quot;&gt;Full Name&lt;/string&gt;&#10;    &lt;string name=&quot;age&quot;&gt;Age&lt;/string&gt;&#10;    &lt;string name=&quot;phone_number&quot;&gt;Phone Number&lt;/string&gt;&#10;    &lt;string name=&quot;email_optional&quot;&gt;Email Address (Optional)&lt;/string&gt;&#10;    &lt;string name=&quot;gender_male&quot;&gt;Male&lt;/string&gt;&#10;    &lt;string name=&quot;gender_female&quot;&gt;Female&lt;/string&gt;&#10;    &lt;string name=&quot;save_patient&quot;&gt;Save Patient&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Cancel&lt;/string&gt;&#10;    &lt;string name=&quot;patients&quot;&gt;Patients&lt;/string&gt;&#10;    &lt;string name=&quot;search_patient&quot;&gt;Search Patient&lt;/string&gt;&#10;    &lt;string name=&quot;see_all&quot;&gt;See All&lt;/string&gt;&#10;    &lt;string name=&quot;recent_added_patients&quot;&gt;Recently Added Patients&lt;/string&gt;&#10;    &lt;string name=&quot;appointments&quot;&gt;Appointments&lt;/string&gt;&#10;    &lt;string name=&quot;today&quot;&gt;Today&lt;/string&gt;&#10;    &lt;string name=&quot;upcoming&quot;&gt;Upcoming&lt;/string&gt;&#10;    &lt;string name=&quot;verification_code&quot;&gt;Verification Code&lt;/string&gt;&#10;    &lt;string name=&quot;welcome&quot;&gt;Welcome, Dr. &lt;/string&gt;&#10;    &lt;string name=&quot;profile&quot;&gt;Profile&lt;/string&gt;&#10;    &lt;string name=&quot;total_patients&quot;&gt;Total Patients&lt;/string&gt;&#10;    &lt;string name=&quot;patient&quot;&gt;Patient&lt;/string&gt;&#10;    &lt;string name=&quot;settings&quot;&gt;Settings&lt;/string&gt;&#10;    &lt;string name=&quot;account_settings&quot;&gt;Account Settings&lt;/string&gt;&#10;    &lt;string name=&quot;edit_doctor_clinic_info&quot;&gt;Edit Doctor and Clinic Information&lt;/string&gt;&#10;    &lt;string name=&quot;change_password&quot;&gt;Change Password&lt;/string&gt;&#10;    &lt;string name=&quot;notifications_settings&quot;&gt;Notification Settings&lt;/string&gt;&#10;    &lt;string name=&quot;enable_reminders&quot;&gt;Enable Appointment Reminders&lt;/string&gt;&#10;    &lt;string name=&quot;ringnotes_customization&quot;&gt;Sound Customization&lt;/string&gt;&#10;    &lt;string name=&quot;app_settings&quot;&gt;App Settings&lt;/string&gt;&#10;    &lt;string name=&quot;language&quot;&gt;Language&lt;/string&gt;&#10;    &lt;string name=&quot;data_back_up&quot;&gt;Data Backup&lt;/string&gt;&#10;    &lt;string name=&quot;help_support&quot;&gt;Help &amp;amp; Support&lt;/string&gt;&#10;    &lt;string name=&quot;faq&quot;&gt;Frequently Asked Questions&lt;/string&gt;&#10;    &lt;string name=&quot;call_support&quot;&gt;Contact Support&lt;/string&gt;&#10;    &lt;string name=&quot;doctor_info&quot;&gt;معلومات الطبيب&lt;/string&gt;&#10;    &lt;string name=&quot;confirm&quot;&gt;تأكيد&lt;/string&gt;&#10;    &lt;string name=&quot;current_password&quot;&gt;كلمة المرور الحالية&lt;/string&gt;&#10;    &lt;string name=&quot;new_password&quot;&gt;كلمة المرور الجديدة&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_new_password&quot;&gt;تأكيد كلمة المرور الجديدة&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Logout&lt;/string&gt;&#10;    &lt;string name=&quot;logout_confirmation_title&quot;&gt;Confirm Logout&lt;/string&gt;&#10;    &lt;string name=&quot;logout_confirmation_message&quot;&gt;Are you sure you want to logout? You will need to login again to access your account.&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>