package com.m7md7sn.dentary.presentation.ui.addpatient

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.m7md7sn.dentary.data.model.Patient
import com.m7md7sn.dentary.data.repository.AuthRepository
import com.m7md7sn.dentary.data.repository.PatientRepository
import com.m7md7sn.dentary.utils.Event
import com.m7md7sn.dentary.utils.Result
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class AddPatientViewModel @Inject constructor(
    private val patientRepository: PatientRepository,
    private val authRepository: AuthRepository
): ViewModel() {
    private val _uiState = MutableStateFlow(AddPatientsUiState())
    val uiState: StateFlow<AddPatientsUiState> = _uiState.asStateFlow()

    private val _snackbarMessage = MutableSharedFlow<Event<String>>()
    val snackbarMessage: SharedFlow<Event<String>> = _snackbarMessage.asSharedFlow()

    private val _navigationEvent = MutableSharedFlow<Event<NavigationEvent>>()
    val navigationEvent: SharedFlow<Event<NavigationEvent>> = _navigationEvent.asSharedFlow()

    fun onFullNameChange(fullName: String) {
        _uiState.value = _uiState.value.copy(fullName = fullName)
        clearFieldError("fullName")
    }

    fun onAgeChange(age: String) {
        _uiState.value = _uiState.value.copy(age = age)
        clearFieldError("age")
    }

    fun onPhoneNumberChange(phoneNumber: String) {
        _uiState.value = _uiState.value.copy(phoneNumber = phoneNumber)
        clearFieldError("phoneNumber")
    }

    fun onEmailChange(email: String) {
        _uiState.value = _uiState.value.copy(email = email)
        clearFieldError("email")
    }

    fun onGenderChange(gender: String) {
        _uiState.value = _uiState.value.copy(gender = gender)
    }

    fun onAddressChange(address: String) {
        _uiState.value = _uiState.value.copy(address = address)
        clearFieldError("address")
    }

    fun onCancelClick() {
        viewModelScope.launch {
            _navigationEvent.emit(Event(NavigationEvent.GoBack))
        }
    }

    fun addPatient() {
        if (!validateInputs()) {
            return
        }

        _uiState.value = _uiState.value.copy(isLoading = true)

        viewModelScope.launch {
            try {
                // Get current user ID
                val currentUser = authRepository.getCurrentUser()
                val userId = currentUser?.id

                if (userId == null) {
                    _uiState.value = _uiState.value.copy(isLoading = false)
                    _snackbarMessage.emit(Event("User not authenticated. Please log in again."))
                    return@launch
                }

                val patient = Patient(
                    id = "", // Will be generated by Supabase
                    userId = userId, // Use current user ID
                    name = _uiState.value.fullName.trim(),
                    phoneNumber = _uiState.value.phoneNumber.trim().takeIf { it.isNotEmpty() },
                    email = _uiState.value.email.trim().takeIf { it.isNotEmpty() },
                    age = _uiState.value.age.toIntOrNull(),
                    address = _uiState.value.address.trim().takeIf { it.isNotEmpty() },
                    medicalHistory = null
                )

                when (val result = patientRepository.createPatient(patient)) {
                    is Result.Success -> {
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            isSuccess = true
                        )
                        _snackbarMessage.emit(Event("Patient added successfully"))
                        clearForm()
                    }
                    is Result.Error -> {
                        _uiState.value = _uiState.value.copy(isLoading = false)
                        _snackbarMessage.emit(Event("Failed to add patient: ${result.message}"))
                    }
                    is Result.Loading -> {
                        // Handle loading state if needed
                    }
                }
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(isLoading = false)
                _snackbarMessage.emit(Event("Error occurred: ${e.message}"))
            }
        }
    }

    private fun validateInputs(): Boolean {
        var isValid = true
        val currentState = _uiState.value

        // Validate full name
        if (currentState.fullName.trim().isEmpty()) {
            _uiState.value = currentState.copy(
                isFullNameError = true,
                fullNameErrorMessage = "Full name is required"
            )
            isValid = false
        } else {
            _uiState.value = currentState.copy(
                isFullNameError = false,
                fullNameErrorMessage = null
            )
        }

        // Validate age
        val age = currentState.age.trim()
        if (age.isNotEmpty()) {
            val ageInt = age.toIntOrNull()
            if (ageInt == null || ageInt <= 0 || ageInt > 150) {
                _uiState.value = _uiState.value.copy(
                    isAgeError = true,
                    ageErrorMessage = "Please enter a valid age"
                )
                isValid = false
            } else {
                _uiState.value = _uiState.value.copy(
                    isAgeError = false,
                    ageErrorMessage = null
                )
            }
        }

        // Validate phone number
        val phoneNumber = currentState.phoneNumber.trim()
        if (phoneNumber.isNotEmpty() && phoneNumber.length < 10) {
            _uiState.value = _uiState.value.copy(
                isPhoneNumberError = true,
                phoneNumberErrorMessage = "Please enter a valid phone number"
            )
            isValid = false
        } else {
            _uiState.value = _uiState.value.copy(
                isPhoneNumberError = false,
                phoneNumberErrorMessage = null
            )
        }

        // Validate email
        val email = currentState.email.trim()
        if (email.isNotEmpty() && !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            _uiState.value = _uiState.value.copy(
                isEmailError = true,
                emailErrorMessage = "Please enter a valid email address"
            )
            isValid = false
        } else {
            _uiState.value = _uiState.value.copy(
                isEmailError = false,
                emailErrorMessage = null
            )
        }

        return isValid
    }

    private fun clearForm() {
        _uiState.value = AddPatientsUiState()
    }

    private fun clearFieldError(field: String) {
        when (field) {
            "fullName" -> {
                if (_uiState.value.isFullNameError) {
                    _uiState.value = _uiState.value.copy(
                        isFullNameError = false,
                        fullNameErrorMessage = null
                    )
                }
            }
            "age" -> {
                if (_uiState.value.isAgeError) {
                    _uiState.value = _uiState.value.copy(
                        isAgeError = false,
                        ageErrorMessage = null
                    )
                }
            }
            "phoneNumber" -> {
                if (_uiState.value.isPhoneNumberError) {
                    _uiState.value = _uiState.value.copy(
                        isPhoneNumberError = false,
                        phoneNumberErrorMessage = null
                    )
                }
            }
            "email" -> {
                if (_uiState.value.isEmailError) {
                    _uiState.value = _uiState.value.copy(
                        isEmailError = false,
                        emailErrorMessage = null
                    )
                }
            }
            "address" -> {
                if (_uiState.value.isAddressError) {
                    _uiState.value = _uiState.value.copy(
                        isAddressError = false,
                        addressErrorMessage = null
                    )
                }
            }
        }
    }

    fun clearErrors() {
        _uiState.value = _uiState.value.copy(
            isFullNameError = false,
            fullNameErrorMessage = null,
            isAgeError = false,
            ageErrorMessage = null,
            isPhoneNumberError = false,
            phoneNumberErrorMessage = null,
            isEmailError = false,
            emailErrorMessage = null,
            isAddressError = false,
            addressErrorMessage = null,
        )
    }
}

sealed class NavigationEvent {
    object GoBack : NavigationEvent()
}
